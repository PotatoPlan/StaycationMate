@model IEnumerable<StaycationMate.Models.Attraction>

@{
    ViewBag.Title = "Map";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@* Always reference jQuery first when you need to use them in a .cshtml view *@
@Scripts.Render("~/bundles/jquery")

<style>
    .container-fluid {
        width: 100%;
        height: auto;
    }

    .the-table {
        margin-top: 2em;
        display: none;
    }

    .mapboxgl-popup {
        max-width: 400px;
        max-height: 200px;
    }

    .container-fluid p {
        font-size: 1.2em;
    }
</style>

@if (!Model.Any())
{
    <p>Something went wrong, we cannot find any places</p>
}

<div class="container-fluid">
    <h2>Discover Victoria</h2>
    <p>Find your desired places and make bookings</p>
    <div id="map" style="width: 100%; height: 500px"></div>

    <div class="the-table">
        <table class="table table-condensed">
            <thead>
                <tr>
                    <th>
                        Attraction
                    </th>
                    <th>
                        City
                    </th>
                    <th>
                        Address
                    </th>
                    <th>
                        Latitude
                    </th>
                    <th>
                        Longitude
                    </th>
                    <th>
                        Action
                    </th>
                </tr>
            </thead>

            <tbody>
                @foreach (var location in Model)
                {
                    <tr class="coordinates">
                        <td class="location-name">
                            @location.Location_Name
                        </td>

                        <td>
                            @location.City
                        </td>

                        <td class="location-address">
                            @location.Street_Address, @location.State, @location.Postal_Code
                        </td>

                        <td class="latitude">
                            @location.Latitude
                        </td>

                        <td class="longitude">
                            @location.Longitude
                        </td>

                        @* Passing this link to the JavaScript part, this will allow the user to visit the booking page *@
                        <td class="booking-link">
                            /Attractions/Booking?bookingLocation=@location.Location_Name&bookingCity=@location.City&bookingStreetAddress=@location.Street_Address&bookingState=Victoria&bookingPostalCode=@location.Postal_Code
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @section Scripts {

        @Scripts.Render("~/Scripts/DataTables/jquery.dataTables.js")
        @Scripts.Render("~/Scripts/DataTables/dataTables.bootstrap.js")
        <script>
            $(document).ready(function () {
                $('.table').DataTable();
            });
        </script>
    }
    <link href="~/Content/DataTables/css/dataTables.bootstrap.min.css"
          rel="stylesheet" />
</div>


<script>
    // Some of the following codes are based on MapBox's official documentation

    // This is a MapBox public API token
    mapboxgl.accessToken = 'pk.eyJ1IjoicG90YXRvcGxhbiIsImEiOiJja252cGFseG8wbGdjMndzN2JmbDFpcHMyIn0.oHLNoBfm3Dy5jWNT0gOd1g';
    const map = new mapboxgl.Map({
        container: 'map', // container ID
        style: 'mapbox://styles/mapbox/light-v10', // style URL
        center: [144, -37], // starting position [lng, lat]
        zoom: 6 // starting zoom
    });

    map.addControl(new mapboxgl.NavigationControl());

    var locations = [];


    $(".coordinates").each(function () {
        var latitude = $(".latitude", this).text().trim();
        var longitude = $(".longitude", this).text().trim();
        var locationName = $(".location-name", this).text().trim();
        var locationAddress = $(".location-address", this).text().trim();
        // Take the bookingLink value, the browser can understand empty space in the link I suppose
        var bookingLink = $('.booking-link', this).text().trim();


        var point = {
            "locationName": locationName,
            "locationAddress": locationAddress,
            "latitude": latitude,
            "longitude": longitude,
            "bookingLink": bookingLink
        };

        locations.push(point);
    })

    var data = [];
    for (i = 0; i < locations.length; i++) {
        var feature = {
            "type": "Feature",
            "properties": {
                "title": locations[i].locationName,
                "icon": 'custom-marker',
                // Add the link to the onClick interaction, use it as an <a></a>
                "address": `<p>${locations[i].locationAddress}</p> </br> <a href="${locations[i].bookingLink}" class="btn btn-primary">Book</a>`
            },
            "geometry": {
                "type": "Point",
                "coordinates": [locations[i].longitude, locations[i].latitude]
            }
        };
        data.push(feature)
    }

    map.on('load', function () {
        map.loadImage(
            '../../Content/custom_marker.png', (error, image) => {
                if (error) throw error;
                map.addImage('custom-marker', image)
            })
        // Add a layer showing the places.
        map.addLayer({
            "id": "places",
            "type": "symbol",
            "source": {
                "type": "geojson",
                "data": {
                    "type": "FeatureCollection",
                    "features": data
                }
            },
            "layout": {
                "icon-image": "{icon}",
                "icon-allow-overlap": true,
                "text-field": "{title}",
                'text-font': [
                    "Open Sans Regular", "Arial Unicode MS Regular"
                ],
                'text-offset': [0, 2],
                'text-anchor': 'top',
                "text-size": 10
            }
        });

    });

    // Add a new control, the search bar on the top left of this map
    map.addControl(new MapboxGeocoder({
        accessToken: mapboxgl.accessToken,
        mapboxgl: mapboxgl
    }), "top-left");

    // When the onClick happens, open a popup at the location of the feature, with description from its properties.
    map.on('click', 'places', (e) => {
        // Use the coordinates and properties from the feature of the location
        const coordinates = e.features[0].geometry.coordinates.slice();
        const description = e.features[0].properties.address;

        // Make sure that if the map is zoomed out such that multiple copies of the feature are visible, the popup appears over the copy being pointed to
        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
            coordinates[0] += e.lngLag > coordinates[0] ? 360 : -360;
        }

        // Set the latitude and longitude, set the HTML content, and add it to the map
        new mapboxgl.Popup().setLngLat(coordinates).setHTML(description).addTo(map);
    });

    // Change the cursor to a pointer when the mouse is over the places layer.
    map.on('mouseenter', 'places', () => {
        map.getCanvas().style.cursor = 'pointer';
    });

    // Change it back when leaves.
    map.on('mouseleave', 'places', () => {
        map.getCanvas().style.cursor = '';
    });

    console.log(data);

</script>
